// <auto-generated />
using System;
using AniMatcher.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AniMatcher.DataAccess.Migrations
{
    [DbContext(typeof(AniMatcherContext))]
    partial class AniMatcherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CopyrightId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("CharacterId");

                    b.HasIndex("CopyrightId");

                    b.HasIndex("TestId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = new Guid("04f9df89-1da2-4b30-9de8-805b9f713e2c"),
                            CopyrightId = new Guid("344799ad-7514-4ed8-a504-64f02e173ee5"),
                            Name = "Batman"
                        },
                        new
                        {
                            CharacterId = new Guid("0a7734b6-50b4-4a42-9f27-008dd8a3fd1c"),
                            CopyrightId = new Guid("344799ad-7514-4ed8-a504-64f02e173ee5"),
                            Name = "Superman"
                        },
                        new
                        {
                            CharacterId = new Guid("f8276a6e-fff2-4134-85ed-9e35670820bd"),
                            CopyrightId = new Guid("344799ad-7514-4ed8-a504-64f02e173ee5"),
                            Name = "Flash"
                        },
                        new
                        {
                            CharacterId = new Guid("65493002-5f8b-4368-87ef-674d902c7605"),
                            CopyrightId = new Guid("e3c740c1-dbf9-4e4c-badf-7f5d8e7b5a0c"),
                            Name = "Hulk"
                        },
                        new
                        {
                            CharacterId = new Guid("3945be1a-f60e-4d88-b83f-150d9d1b37a7"),
                            CopyrightId = new Guid("e3c740c1-dbf9-4e4c-badf-7f5d8e7b5a0c"),
                            Name = "Spider Man"
                        },
                        new
                        {
                            CharacterId = new Guid("44021a79-5507-414e-b41e-a45315c7fa47"),
                            CopyrightId = new Guid("e3c740c1-dbf9-4e4c-badf-7f5d8e7b5a0c"),
                            Name = "Iron Man"
                        },
                        new
                        {
                            CharacterId = new Guid("f24bf1d9-24f3-4161-bce7-1dd557d0a3a4"),
                            CopyrightId = new Guid("75a447cb-6e63-4602-8310-dff031c69090"),
                            Name = "Naruto"
                        },
                        new
                        {
                            CharacterId = new Guid("e6381bb1-67c6-4fa7-bb2a-96832af704ca"),
                            CopyrightId = new Guid("75a447cb-6e63-4602-8310-dff031c69090"),
                            Name = "Sasuke"
                        },
                        new
                        {
                            CharacterId = new Guid("141bca0d-fca2-4207-8493-f9405c8ae07b"),
                            CopyrightId = new Guid("75a447cb-6e63-4602-8310-dff031c69090"),
                            Name = "Sakura"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Franchise", b =>
                {
                    b.Property<Guid>("FranchiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("FranchiseId");

                    b.HasIndex("TestId");

                    b.ToTable("Franchises");

                    b.HasData(
                        new
                        {
                            FranchiseId = new Guid("e3c740c1-dbf9-4e4c-badf-7f5d8e7b5a0c"),
                            Description = "Comic Franchise",
                            Name = "Marvel"
                        },
                        new
                        {
                            FranchiseId = new Guid("344799ad-7514-4ed8-a504-64f02e173ee5"),
                            Description = "Comic Franchise",
                            Name = "DC"
                        },
                        new
                        {
                            FranchiseId = new Guid("75a447cb-6e63-4602-8310-dff031c69090"),
                            Description = "Manga Franchise",
                            Name = "Naruto"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CharacterOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("RatingId");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId");

                    b.HasIndex("TestId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Property<Guid>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.HasOne("AniMatcher.Domain.Franchise", "Copyright")
                        .WithMany()
                        .HasForeignKey("CopyrightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Characters")
                        .HasForeignKey("TestId");

                    b.Navigation("Copyright");
                });

            modelBuilder.Entity("AniMatcher.Domain.Franchise", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Franchises")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.HasOne("AniMatcher.Domain.Question", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", "Test")
                        .WithOne("Rating")
                        .HasForeignKey("AniMatcher.Domain.Rating", "TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Tags")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Franchises");

                    b.Navigation("Questions");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
