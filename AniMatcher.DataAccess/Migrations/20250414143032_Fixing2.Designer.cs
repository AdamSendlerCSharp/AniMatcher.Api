// <auto-generated />
using System;
using AniMatcher.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AniMatcher.DataAccess.Migrations
{
    [DbContext(typeof(AniMatcherContext))]
    [Migration("20250414143032_Fixing2")]
    partial class Fixing2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CopyrightId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("CharacterId");

                    b.HasIndex("CopyrightId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = new Guid("4ecf7e23-6f80-44b3-910f-0371137d7d8c"),
                            CopyrightId = new Guid("4a9848f1-d16b-4b58-a4b9-65c940f10ea8"),
                            Name = "Batman",
                            Names = "[\"бэтмэн\",\"бэтмен\",\"batman\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("882c7e94-e03a-4853-afcc-b04905724783"),
                            CopyrightId = new Guid("4a9848f1-d16b-4b58-a4b9-65c940f10ea8"),
                            Name = "Superman",
                            Names = "[\"superman\",\"супермен\",\"супермэн\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("c164d15c-0908-45a8-a5d4-deb1e0855f2b"),
                            CopyrightId = new Guid("4a9848f1-d16b-4b58-a4b9-65c940f10ea8"),
                            Name = "Flash",
                            Names = "[\"flash\",\"флэш\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("b840a79b-39e0-43bd-8dfc-9fa2958d93c0"),
                            CopyrightId = new Guid("d8dcbabb-649f-40e7-bd41-c505c2d4459b"),
                            Name = "Hulk",
                            Names = "[\"hulk\",\"халк\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("1f2b3716-93f0-4ca6-9400-271c28e4c174"),
                            CopyrightId = new Guid("d8dcbabb-649f-40e7-bd41-c505c2d4459b"),
                            Name = "Spider Man",
                            Names = "[\"человек-паук\",\"человек паук\",\"spider-man\",\"spider man\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("109b9918-a406-4b88-a45a-847377ab29dd"),
                            CopyrightId = new Guid("d8dcbabb-649f-40e7-bd41-c505c2d4459b"),
                            Name = "Iron Man",
                            Names = "[\"iron man\",\"ironman\",\"железный человек\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("665acda2-5c2c-404d-a34b-d77e2d5b16aa"),
                            CopyrightId = new Guid("cd20d03f-d6f5-4696-ae0b-b6d4ca9396ac"),
                            Name = "Naruto",
                            Names = "[\"наруто\",\"naruto\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("a872f2e7-90ab-4087-a801-cfb2e18a7907"),
                            CopyrightId = new Guid("cd20d03f-d6f5-4696-ae0b-b6d4ca9396ac"),
                            Name = "Sasuke",
                            Names = "[\"саске\",\"сасуке\",\"sasuke\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("479aab0d-3ba3-4236-8ba3-e64ebddbc630"),
                            CopyrightId = new Guid("cd20d03f-d6f5-4696-ae0b-b6d4ca9396ac"),
                            Name = "Sakura",
                            Names = "[\"sakura\",\"сакура\"]"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Franchise", b =>
                {
                    b.Property<Guid>("FranchiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("FranchiseId");

                    b.ToTable("Franchises");

                    b.HasData(
                        new
                        {
                            FranchiseId = new Guid("d8dcbabb-649f-40e7-bd41-c505c2d4459b"),
                            Description = "Comic Franchise",
                            Name = "Marvel",
                            Names = "[\"marvel\",\"марвел\"]"
                        },
                        new
                        {
                            FranchiseId = new Guid("4a9848f1-d16b-4b58-a4b9-65c940f10ea8"),
                            Description = "Comic Franchise",
                            Name = "DC",
                            Names = "[\"dc\",\"диси\",\"дс\"]"
                        },
                        new
                        {
                            FranchiseId = new Guid("cd20d03f-d6f5-4696-ae0b-b6d4ca9396ac"),
                            Description = "Manga Franchise",
                            Name = "Naruto",
                            Names = "[\"наруто\",\"naruto\"]"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CharacterOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("RatingId");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Property<Guid>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CharacterTest", b =>
                {
                    b.Property<Guid>("CharactersCharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("CharactersCharacterId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("CharacterTest");
                });

            modelBuilder.Entity("TagTest", b =>
                {
                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("TagsTagId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("TagTest");
                });

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.HasOne("AniMatcher.Domain.Franchise", "Copyright")
                        .WithMany()
                        .HasForeignKey("CopyrightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Copyright");
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.HasOne("AniMatcher.Domain.Question", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", "Test")
                        .WithOne("Rating")
                        .HasForeignKey("AniMatcher.Domain.Rating", "TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CharacterTest", b =>
                {
                    b.HasOne("AniMatcher.Domain.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTest", b =>
                {
                    b.HasOne("AniMatcher.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Rating")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
