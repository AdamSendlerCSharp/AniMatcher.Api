// <auto-generated />
using System;
using AniMatcher.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AniMatcher.DataAccess.Migrations
{
    [DbContext(typeof(AniMatcherContext))]
    [Migration("20250409145410_Inital03")]
    partial class Inital03
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CopyrightId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("CharacterId");

                    b.HasIndex("CopyrightId");

                    b.HasIndex("TestId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("AniMatcher.Domain.Franchise", b =>
                {
                    b.Property<Guid>("FranchiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("FranchiseId");

                    b.HasIndex("TestId");

                    b.ToTable("Franchises");

                    b.HasData(
                        new
                        {
                            FranchiseId = new Guid("008520f0-2f63-4b4c-9656-fd025ab5a888"),
                            Description = "Comic Franchise",
                            Name = "Marvel"
                        },
                        new
                        {
                            FranchiseId = new Guid("e73c0f8f-af21-4afd-9614-b6265db390ad"),
                            Description = "Comic Franchise",
                            Name = "DC"
                        },
                        new
                        {
                            FranchiseId = new Guid("52bf3aa8-1e1f-4de1-924c-0c818adbf50e"),
                            Description = "Manga Franchise",
                            Name = "Naruto"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CharacterOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("RatingId");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId");

                    b.HasIndex("TestId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Property<Guid>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.HasOne("AniMatcher.Domain.Franchise", "Copyright")
                        .WithMany()
                        .HasForeignKey("CopyrightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Characters")
                        .HasForeignKey("TestId");

                    b.Navigation("Copyright");
                });

            modelBuilder.Entity("AniMatcher.Domain.Franchise", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Franchises")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.HasOne("AniMatcher.Domain.Question", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", "Test")
                        .WithOne("Rating")
                        .HasForeignKey("AniMatcher.Domain.Rating", "TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Tags")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Franchises");

                    b.Navigation("Questions");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
