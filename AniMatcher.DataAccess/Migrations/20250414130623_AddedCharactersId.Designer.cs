// <auto-generated />
using System;
using System.Collections.Generic;
using AniMatcher.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AniMatcher.DataAccess.Migrations
{
    [DbContext(typeof(AniMatcherContext))]
    [Migration("20250414130623_AddedCharactersId")]
    partial class AddedCharactersId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CopyrightId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("CharacterId");

                    b.HasIndex("CopyrightId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = new Guid("dc0c570d-83dc-4de0-977c-35b469a4a1f5"),
                            CopyrightId = new Guid("18abb9a1-a604-4b05-b9a8-a89c02ab8573"),
                            Name = "Batman",
                            Names = "[\"бэтмэн\",\"бэтмен\",\"batman\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("1ba1c580-75d0-4b3d-824b-3a3fbda6c609"),
                            CopyrightId = new Guid("18abb9a1-a604-4b05-b9a8-a89c02ab8573"),
                            Name = "Superman",
                            Names = "[\"superman\",\"супермен\",\"супермэн\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("cad81edd-425b-429f-b460-24f9668e5daf"),
                            CopyrightId = new Guid("18abb9a1-a604-4b05-b9a8-a89c02ab8573"),
                            Name = "Flash",
                            Names = "[\"flash\",\"флэш\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("f0cc3f8d-0529-443d-83fa-a8517b8651f9"),
                            CopyrightId = new Guid("483824e2-e247-4e4a-b815-aadcabda8286"),
                            Name = "Hulk",
                            Names = "[\"hulk\",\"халк\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("a15bee74-8ee9-4ab2-a2e7-513728f1159c"),
                            CopyrightId = new Guid("483824e2-e247-4e4a-b815-aadcabda8286"),
                            Name = "Spider Man",
                            Names = "[\"человек-паук\",\"человек паук\",\"spider-man\",\"spider man\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("b7abd319-13c1-4008-9155-72b7621b774c"),
                            CopyrightId = new Guid("483824e2-e247-4e4a-b815-aadcabda8286"),
                            Name = "Iron Man",
                            Names = "[\"iron man\",\"ironman\",\"железный человек\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("2e8509ee-eb7e-49aa-843d-8aaa50f93b47"),
                            CopyrightId = new Guid("9cfa065a-7916-4707-aec5-6f7d16a136a3"),
                            Name = "Naruto",
                            Names = "[\"наруто\",\"naruto\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("9f2503b7-e31d-4118-9faa-df5b99bcf4b1"),
                            CopyrightId = new Guid("9cfa065a-7916-4707-aec5-6f7d16a136a3"),
                            Name = "Sasuke",
                            Names = "[\"саске\",\"сасуке\",\"sasuke\"]"
                        },
                        new
                        {
                            CharacterId = new Guid("16f57d18-64ed-4d3e-958c-160960ab1059"),
                            CopyrightId = new Guid("9cfa065a-7916-4707-aec5-6f7d16a136a3"),
                            Name = "Sakura",
                            Names = "[\"sakura\",\"сакура\"]"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Franchise", b =>
                {
                    b.Property<Guid>("FranchiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("FranchiseId");

                    b.ToTable("Franchises");

                    b.HasData(
                        new
                        {
                            FranchiseId = new Guid("483824e2-e247-4e4a-b815-aadcabda8286"),
                            Description = "Comic Franchise",
                            Name = "Marvel",
                            Names = "[\"marvel\",\"марвел\"]"
                        },
                        new
                        {
                            FranchiseId = new Guid("18abb9a1-a604-4b05-b9a8-a89c02ab8573"),
                            Description = "Comic Franchise",
                            Name = "DC",
                            Names = "[\"dc\",\"диси\",\"дс\"]"
                        },
                        new
                        {
                            FranchiseId = new Guid("9cfa065a-7916-4707-aec5-6f7d16a136a3"),
                            Description = "Manga Franchise",
                            Name = "Naruto",
                            Names = "[\"наруто\",\"naruto\"]"
                        });
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CharacterOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("RatingId");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.HasIndex("TestId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Property<Guid>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("CharactersId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("TagsId")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CharacterTest", b =>
                {
                    b.Property<Guid>("CharactersCharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("CharactersCharacterId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("CharacterTest");
                });

            modelBuilder.Entity("AniMatcher.Domain.Character", b =>
                {
                    b.HasOne("AniMatcher.Domain.Franchise", "Copyright")
                        .WithMany()
                        .HasForeignKey("CopyrightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Copyright");
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AniMatcher.Domain.QuestionOption", b =>
                {
                    b.HasOne("AniMatcher.Domain.Question", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("AniMatcher.Domain.Rating", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", "Test")
                        .WithOne("Rating")
                        .HasForeignKey("AniMatcher.Domain.Rating", "TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AniMatcher.Domain.Tag", b =>
                {
                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany("Tags")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("CharacterTest", b =>
                {
                    b.HasOne("AniMatcher.Domain.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniMatcher.Domain.Test", null)
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AniMatcher.Domain.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("AniMatcher.Domain.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
